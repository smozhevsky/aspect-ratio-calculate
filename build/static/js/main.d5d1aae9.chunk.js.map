{"version":3,"sources":["components/AspectForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","paper","marginTop","spacing","form","submit","margin","INITIAL_VALUES","width","height","maxWidth","AspectForm","onSubmit","classes","initialValues","values","handleChange","handleBlur","className","Grid","container","direction","alignItems","TextField","variant","required","label","name","onChange","onBlur","Button","type","color","App","ratioResult","initialRatio","console","log","i","j","push","dir","getAspectRatio","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAKMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,MAAO,CACLC,UAAWF,EAAMG,QAAQ,IAE3BC,KAAM,CAEJF,UAAWF,EAAMG,QAAQ,IAE3BE,OAAQ,CACNC,OAAQN,EAAMG,QAAQ,EAAG,EAAG,QAI1BI,EAAiB,CAAEC,MAAO,GAAIC,OAAQ,GAAIC,SAAU,IAM7CC,EAAa,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SACrBC,EAAUf,IAEhB,OACE,cAAC,IAAD,CAAQgB,cAAeP,EAAgBK,SAAUA,EAAjD,SACG,cAAGG,OAAH,IAAWC,EAAX,EAAWA,aAAcC,EAAzB,EAAyBA,WAAzB,OACC,cAAC,IAAD,CAAMC,UAAWL,EAAQT,KAAzB,SACE,eAACe,EAAA,EAAD,CACED,UAAWL,EAAQZ,MACnBmB,WAAS,EACTC,UAAU,SACVC,WAAW,SAJb,UAME,cAACC,EAAA,EAAD,CACEC,QAAQ,WACRlB,OAAO,QACPmB,UAAQ,EACRC,MAAM,QACNC,KAAK,QACLC,SAAUZ,EACVa,OAAQZ,IAEV,cAACM,EAAA,EAAD,CACEC,QAAQ,WACRlB,OAAO,QACPmB,UAAQ,EACRC,MAAM,SACNC,KAAK,SACLC,SAAUZ,EACVa,OAAQZ,IAEV,cAACM,EAAA,EAAD,CACEC,QAAQ,WACRlB,OAAO,QACPmB,UAAQ,EACRC,MAAM,WACNC,KAAK,WACLC,SAAUZ,EACVa,OAAQZ,IAEV,cAACa,EAAA,EAAD,CACEC,KAAK,SACLP,QAAQ,YACRQ,MAAM,UACNd,UAAWL,EAAQR,OAJrB,gCChCG4B,MA5Bf,WAkBE,OACE,cAAC,EAAD,CACErB,SAAU,aAnBO,SAACJ,EAAeC,EAAgBC,GACnD,IAAIwB,EAAmB,GACnBC,EAAuB3B,EAAQC,EAEnC,GADA2B,QAAQC,IAAIF,GACR3B,GAASC,EACX,IAAK,IAAI6B,EAAI9B,EAAO8B,EAAI5B,EAAU4B,IAChC,IAAK,IAAIC,EAAI9B,EAAQ8B,EAAID,EAAGC,IACtBD,EAAIC,IAAMJ,GACZD,EAAYM,KAAK,CAACF,EAAGC,IAM7BH,QAAQK,IAAIP,GAORQ,EAF8C,EAAnClC,OAAmC,EAA5BC,QAA4B,EAApBC,cCVnBiC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d5d1aae9.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { Form, Formik } from \"formik\";\r\nimport { Button, Grid, TextField } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n  },\r\n  form: {\r\n    // width: \"80%\",\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nconst INITIAL_VALUES = { width: \"\", height: \"\", maxWidth: \"\" };\r\n\r\ninterface Props {\r\n  onSubmit: (values: typeof INITIAL_VALUES) => void;\r\n}\r\n\r\nexport const AspectForm = ({ onSubmit }: Props) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Formik initialValues={INITIAL_VALUES} onSubmit={onSubmit}>\r\n      {({ values, handleChange, handleBlur }) => (\r\n        <Form className={classes.form}>\r\n          <Grid\r\n            className={classes.paper}\r\n            container\r\n            direction=\"column\"\r\n            alignItems=\"center\"\r\n          >\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"dense\"\r\n              required\r\n              label=\"width\"\r\n              name=\"width\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"dense\"\r\n              required\r\n              label=\"height\"\r\n              name=\"height\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"dense\"\r\n              required\r\n              label=\"maxWidth\"\r\n              name=\"maxWidth\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n            >\r\n              Calculate\r\n            </Button>\r\n          </Grid>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { AspectForm } from \"./components/AspectForm\";\n\nfunction App() {\n  let getAspectRatio = (width: number, height: number, maxWidth: number) => {\n    let ratioResult: any = [];\n    let initialRatio: number = width / height;\n    console.log(initialRatio);\n    if (width >= height) {\n      for (let i = width; i < maxWidth; i++) {\n        for (let j = height; j < i; j++) {\n          if (i / j === initialRatio) {\n            ratioResult.push([i, j]);\n          }\n        }\n      }\n    }\n\n    console.dir(ratioResult);\n  };\n\n  return (\n    <AspectForm\n      onSubmit={({ width, height, maxWidth }: any) => {\n        debugger;\n        getAspectRatio(+width, +height, +maxWidth);\n      }}\n    />\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}